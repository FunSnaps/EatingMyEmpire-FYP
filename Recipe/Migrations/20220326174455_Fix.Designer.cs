// <auto-generated />
using EatingMyEmpire.Api.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EatingMyEmpire.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220326174455_Fix")]
    partial class Fix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EatingMyEmpire.Shared.CourseRecipeChoice", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuCourseId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("SuggestedMenuId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("MenuCourseId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("SuggestedMenuId");

                    b.ToTable("CourseRecipeChoice");
                });

            modelBuilder.Entity("EatingMyEmpire.Shared.Ingredient", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IngredientTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("IngredientTypeId");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("EatingMyEmpire.Shared.IngredientType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("IngredientType");
                });

            modelBuilder.Entity("EatingMyEmpire.Shared.MenuCourse", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SuggestedMenuId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("SuggestedMenuId");

                    b.ToTable("MenuCourse");
                });

            modelBuilder.Entity("EatingMyEmpire.Shared.MenuType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MenuTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("MenuType");
                });

            modelBuilder.Entity("EatingMyEmpire.Shared.Recipe", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeStepId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("RecipeStepId");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("EatingMyEmpire.Shared.RecipeStep", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("RecipeStep");
                });

            modelBuilder.Entity("EatingMyEmpire.Shared.RecipeStepIngredient", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeStepId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("AmountRequired")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "RecipeStepId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeStepId");

                    b.ToTable("RecipeStepIngredient");
                });

            modelBuilder.Entity("EatingMyEmpire.Shared.SuggestedMenu", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MenuDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuTypeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("MenuTypeId");

                    b.ToTable("SuggestedMenu");
                });

            modelBuilder.Entity("EatingMyEmpire.Shared.CourseRecipeChoice", b =>
                {
                    b.HasOne("EatingMyEmpire.Shared.MenuCourse", "MenuCourse")
                        .WithMany()
                        .HasForeignKey("MenuCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EatingMyEmpire.Shared.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EatingMyEmpire.Shared.SuggestedMenu", "SuggestedMenu")
                        .WithMany()
                        .HasForeignKey("SuggestedMenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MenuCourse");

                    b.Navigation("Recipe");

                    b.Navigation("SuggestedMenu");
                });

            modelBuilder.Entity("EatingMyEmpire.Shared.Ingredient", b =>
                {
                    b.HasOne("EatingMyEmpire.Shared.IngredientType", "IngredientType")
                        .WithMany()
                        .HasForeignKey("IngredientTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IngredientType");
                });

            modelBuilder.Entity("EatingMyEmpire.Shared.MenuCourse", b =>
                {
                    b.HasOne("EatingMyEmpire.Shared.SuggestedMenu", "SuggestedMenu")
                        .WithMany()
                        .HasForeignKey("SuggestedMenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SuggestedMenu");
                });

            modelBuilder.Entity("EatingMyEmpire.Shared.Recipe", b =>
                {
                    b.HasOne("EatingMyEmpire.Shared.RecipeStep", "RecipeStep")
                        .WithMany()
                        .HasForeignKey("RecipeStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RecipeStep");
                });

            modelBuilder.Entity("EatingMyEmpire.Shared.RecipeStepIngredient", b =>
                {
                    b.HasOne("EatingMyEmpire.Shared.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EatingMyEmpire.Shared.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EatingMyEmpire.Shared.RecipeStep", "RecipeStep")
                        .WithMany()
                        .HasForeignKey("RecipeStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");

                    b.Navigation("RecipeStep");
                });

            modelBuilder.Entity("EatingMyEmpire.Shared.SuggestedMenu", b =>
                {
                    b.HasOne("EatingMyEmpire.Shared.MenuType", "MenuType")
                        .WithMany()
                        .HasForeignKey("MenuTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MenuType");
                });
#pragma warning restore 612, 618
        }
    }
}
